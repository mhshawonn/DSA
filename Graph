#include<bits/stdc++.h>
using namespace std;


class Graph {
  private:
    vector<vector<int>> adjList;

  public:
    Graph(int numVertices) {
     
        adjList.resize(numVertices);
    }

    void addEdge(int u, int v) {
        adjList[u].push_back(v);
        adjList[v].push_back(u); // For undirected graphs
    }

    vector<int> getNeighbors(int vertex) {
        return adjList[vertex];
    }


    void BFS(int s,int v){
    vector<bool>visited(v+1,false);
    queue<int>q;
    visited[s]=true;
    q.push(s);
    while(!q.empty()){
        int u=q.front();
        q.pop();
        cout<<u<<" ";
        for(int v:adjList[u]){
            if(visited[v]==false){
                visited[v]=true;
                q.push(v);
            }
        }
    }
    cout<<"\n";
}
    void DFS(int v){
        vector<bool>visited(v+1,false);
        for(int i=0;i<v;i++){
            if(visited[i]==false){
                DFSREC(i,visited);
            }
        }
    }
    void DFSREC(int s,vector<bool>&visited){
        visited[s]=true;
        cout<<s<<" ";
        for(int u:adjList[s]){
            if(visited[u]==false){
                DFSREC(u,visited);
            }
        }
        cout<<"\n";
    }
};

int main(){
     // create a graph with 5 vertices
    Graph g(5);

    // add some edges to the graph
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 3);
    g.addEdge(3, 4);

    // print the neighbors of each vertex
    for (int i = 0; i < 5; i++) {
        cout << "Neighbors of vertex " << i << ": ";
        vector<int> neighbors = g.getNeighbors(i);
        for (int j = 0; j < neighbors.size(); j++) {
            cout << neighbors[j] << " ";
        }
        cout << endl;
    }
    g.BFS(2,5);
    g.DFS(5);

    return 0;
}
