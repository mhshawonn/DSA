#include<bits/stdc++.h>
using namespace std;


class node{

    public:
    int data;
    node *next;

    node( int value ){
        data = value;
        next = NULL;
    }
};

void DeletAtHead( node * &head ){  

    node *todelete = head;
    head = head -> next;
    delete todelete;
}
void Deletion( node * &head , int value ){  

    if( head == NULL ) return;
    if( head -> next == NULL ){
        DeletAtHead( head );
    }
    node *temp = head;
    while( temp -> next -> data != value ){
        temp = temp -> next;
    }
    node *todelete = temp -> next;
    temp -> next = temp -> next -> next;
    delete todelete;
}
void InsertAtHead( node * &head , int value ){

    node *n = new node( value );
    n -> next = head;
    head = n;
}
void InsertAtTail( node * &head , int value ){

    node *n = new node( value );
    if( head == NULL ){
        head = n;
        return;
    }
    node *temp = head;
    while( temp -> next != NULL ){
        temp = temp -> next;
    }
    temp -> next = n;
}

bool search( node *head , int key ){   

    node *temp = head;
    while( temp != NULL ){
        if( temp -> data == key ){
            return true;
        }
        temp = temp -> next;
    }
    return false;
}
void Display( node *head ){

    node *temp = head;
    while( temp != NULL ){
        cout << temp -> data <<"->";
        temp = temp -> next;
    }
    cout << endl;
}

node *reverse( node * &head ){    // how to reverse a linkedlist 

    node *previousptr = NULL;
    node *currentptr = head;                  
    node *nextptr;  

    while( currentptr != NULL ){
        nextptr = currentptr -> next;
        currentptr -> next = previousptr;

        previousptr = currentptr;
        currentptr = nextptr;
    }
    return previousptr;
}
node* mergeTwoLists(node* l1, node* l2) 
  {
   
    if(l1 == NULL)
        {
      return l2;
    }
    
    
    if(l2 == NULL)
        {
      return l1;
    } 
 
    if(l1 -> data <= l2 -> data)
        {
      l1 -> next = mergeTwoLists(l1 -> next, l2);
      return l1;
    }
  
    else
        {
      l2 -> next = mergeTwoLists(l1, l2 -> next);
      return l2;            
    }
  }
int main(){

    int k;
   cin>>k;
    node* head[k+1];
    for(int i=1;i<=k;i++){
        head[i]=NULL;
       int t;
       t=k;
       
        while(t--){
            int x;
            cin>>x;
            InsertAtTail(head[i],x);
        }
    }
    node* ans=NULL;
    ans=mergeTwoLists(head[1],head[2]);
    for(int i=3;i<=k;i++){
        ans=mergeTwoLists(ans,head[i]);
    }
    Display(ans);
   
  
    
 

   
    return 0;
}
